<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cmake用法</title>
      <link href="/2024/01/30/CMake/"/>
      <url>/2024/01/30/CMake/</url>
      
        <content type="html"><![CDATA[<h1 id="CMake常用命令"><a href="#CMake常用命令" class="headerlink" title="CMake常用命令"></a>CMake常用命令</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>COMMAND(args...)</code>，多个参数用空白符分隔</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h2 id="1-cmake-minimum-required-VERSION-3-4-1"><a href="#1-cmake-minimum-required-VERSION-3-4-1" class="headerlink" title="1. cmake_minimum_required (VERSION 3.4.1)"></a>1. cmake_minimum_required (VERSION 3.4.1)</h2><p>指定需要的最小的cmake版本</p><h2 id="2-aux-source-directory"><a href="#2-aux-source-directory" class="headerlink" title="2. aux_source_directory"></a>2. aux_source_directory</h2><p>查找源文件并保存到相应的变量中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找当前目录下所有源文件并保存至SRC_LIST变量中</span></span><br><span class="line">aux_source_directory(. SRC_LIST)</span><br></pre></td></tr></table></figure><h2 id="3-add-library"><a href="#3-add-library" class="headerlink" title="3. add_library"></a>3. add_library</h2><h3 id="3-1-添加一个库"><a href="#3-1-添加一个库" class="headerlink" title="3.1 添加一个库"></a>3.1 添加一个库</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_library(&lt;name&gt; <span class="selector-attr">[STATIC | SHARED | MODULE]</span> <span class="selector-attr">[EXCLUDE_FROM_ALL]</span> source1 source2 ... sourceN)</span><br></pre></td></tr></table></figure><ul><li>添加一个名为&#96;&#96;的库文件</li><li>指定<code>STATIC, SHARED, MODULE</code>参数来指定要创建的库的类型, <code>STATIC</code>对应的静态库(.a)，<code>SHARED</code>对应共享动态库(.so)</li><li><code>[EXCLUDE_FROM_ALL]</code>, 如果指定了这一属性，对应的一些属性会在目标被创建时被设置(<strong>指明此目录和子目录中所有的目标，是否应当从默认构建中排除, 子目录的IDE工程文件&#x2F;Makefile将从顶级IDE工程文件&#x2F;Makefile中排除</strong>)</li><li><code>source1 source2 ... sourceN</code>用来指定源文件</li></ul><h3 id="3-2-导入已有的库"><a href="#3-2-导入已有的库" class="headerlink" title="3.2 导入已有的库"></a>3.2 导入已有的库</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_library(&lt;name&gt; <span class="selector-attr">[STATIC | SHARED | MODULE | UNKNOWN]</span> IMPORTED)</span><br></pre></td></tr></table></figure><p>导入了一个已存在的&#96;&#96;库文件，导入库一般配合<code>set_target_properties</code>使用，这个命令用来指定导入库的路径,比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_library(<span class="built_in">test</span> SHARED IMPORTED)</span><br><span class="line">set_target_properties(  <span class="built_in">test</span> <span class="comment">#指定目标库名称</span></span><br><span class="line">                        PROPERTIES IMPORTED_LOCATION <span class="comment">#指明要设置的参数</span></span><br><span class="line">                        libs/src/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libtest.so <span class="comment">#设定导入库的路径)</span></span><br></pre></td></tr></table></figure><h2 id="4-set"><a href="#4-set" class="headerlink" title="4. set"></a>4. set</h2><p>设置CMake变量</p><p><strong>例子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置可执行文件的输出路径(EXCUTABLE_OUTPUT_PATH是全局变量)</span></span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH [output_path])</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置库文件的输出路径(LIBRARY_OUTPUT_PATH是全局变量)</span></span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_PATH [output_path])</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置C++编译参数(CMAKE_CXX_FLAGS是全局变量)</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-Wall std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置源文件集合(SOURCE_FILES是本地变量即自定义变量)</span></span><br><span class="line"><span class="built_in">set</span>(SOURCE_FILES main.cpp test.cpp ...)</span><br></pre></td></tr></table></figure><h2 id="5-include-directories"><a href="#5-include-directories" class="headerlink" title="5. include_directories"></a>5. include_directories</h2><p>设置头文件位置</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以用相对货绝对路径，也可以用自定义的变量值</span></span><br><span class="line">include_directories(./<span class="keyword">include</span> <span class="variable">$&#123;</span><span class="variable constant_">MY_INCLUDE</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-add-executable"><a href="#6-add-executable" class="headerlink" title="6. add_executable"></a>6. add_executable</h2><p>添加可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_executable(&lt;name&gt; <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-target-link-libraries"><a href="#7-target-link-libraries" class="headerlink" title="7. target_link_libraries"></a>7. target_link_libraries</h2><p>将若干库链接到目标库文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">target_link_libraries</span>(&lt;name&gt; lib1 lib2 lib3)</span><br></pre></td></tr></table></figure><p>将<code>lib1, lib2, lib3</code>链接到&#96;&#96;上</p><blockquote><p>NOTE: 链接的顺序应当符合gcc链接顺序规则，被链接的库放在依赖它的库的后面，即如果上面的命令中，lib1依赖于lib2, lib2又依赖于lib3，则在上面命令中必须严格按照<code>lib1 lib2 lib3</code>的顺序排列，否则会报错<br> 也可以自定义链接选项, 比如针对lib1使用<code>-WL</code>选项,<code>target_link_libraries( lib1 -WL, lib2 lib3)</code></p></blockquote><h2 id="8-add-definitions"><a href="#8-add-definitions" class="headerlink" title="8. add_definitions"></a>8. add_definitions</h2><p>为当前路径以及子目录的源文件加入由<code>-D</code>引入得<code>define flag</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_definitions(-DFOO -DDEBUG ...)</span><br></pre></td></tr></table></figure><h2 id="9-add-subdirectory"><a href="#9-add-subdirectory" class="headerlink" title="9. add_subdirectory"></a>9. add_subdirectory</h2><p>如果当前目录下还有子目录时可以使用<code>add_subdirectory</code>，子目录中也需要包含有<code>CMakeLists.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sub_dir指定包含CMakeLists.txt和源码文件的子目录位置</span></span><br><span class="line"><span class="comment"># binary_dir是输出路径， 一般可以不指定</span></span><br><span class="line">add_subdirecroty(sub_dir [binary_dir])</span><br></pre></td></tr></table></figure><h2 id="10-file"><a href="#10-file" class="headerlink" title="10. file"></a>10. file</h2><p>文件操作命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将message写入filename文件中,会覆盖文件原有内容</span></span><br><span class="line">file(WRITE filename <span class="string">&quot;message&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将message写入filename文件中，会追加在文件末尾</span></span><br><span class="line">file(APPEND filename <span class="string">&quot;message&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 从filename文件中读取内容并存储到var变量中，如果指定了numBytes和offset，</span></span><br><span class="line"><span class="meta"># 则从offset处开始最多读numBytes个字节，另外如果指定了HEX参数，则内容会以十六进制形式存储在var变量中</span></span><br><span class="line">file(READ filename <span class="keyword">var</span> [LIMIT numBytes] [OFFSET offset] [HEX])</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重命名文件</span><br><span class="line">file(RENAME <span class="tag">&lt;<span class="name">oldname</span>&gt;</span> <span class="tag">&lt;<span class="name">newname</span>&gt;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除文件， 等于rm命令</span></span><br><span class="line">file(REMOVE [file1 ...])</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归的执行删除文件命令, 等于rm -r</span></span><br><span class="line">file(REMOVE_RECURSE [file1 ...])</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 根据指定的url下载文件</span><br><span class="line"># timeout超时时间; 下载的状态会保存到status中; 下载日志会被保存到log; sum指定所下载文件预期的MD5值,如果指定会自动进行比对，如果不一致，则返回一个错误; SHOW_PROGRESS，进度信息会以状态信息的形式被打印出来</span><br><span class="line">file(DOWNLOAD url file <span class="selector-attr">[TIMEOUT timeout]</span> <span class="selector-attr">[STATUS status]</span> <span class="selector-attr">[LOG log]</span> <span class="selector-attr">[EXPECTED_MD5 sum]</span> <span class="selector-attr">[SHOW_PROGRESS]</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">file(MAKE_DIRECTORY [dir1 dir2 ...])</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会把path转换为以unix的/开头的cmake风格路径,保存在result中</span></span><br><span class="line">file(TO_CMAKE_PATH path result)</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 它会把cmake风格的路径转换为本地路径风格：windows下用<span class="string">&quot;\&quot;，而unix下用&quot;</span>/<span class="string">&quot;</span></span><br><span class="line"><span class="string">file(TO_NATIVE_PATH path result)</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将会为所有匹配查询表达式的文件生成一个文件list，并将该list存储进变量variable里, 如果一个表达式指定了RELATIVE, 返回的结果将会是相对于给定路径的相对路径, 查询表达式例子: *.cxx, *.vt?</span><br><span class="line">NOTE: 按照官方文档的说法，不建议使用file的GLOB指令来收集工程的源文件</span><br><span class="line"><span class="built_in">file</span>(GLOB variable [RELATIVE path] [globbing expressions]...)</span><br></pre></td></tr></table></figure><h2 id="11-set-directory-properties"><a href="#11-set-directory-properties" class="headerlink" title="11. set_directory_properties"></a>11. set_directory_properties</h2><p>设置某个路径的一种属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_directory_properties(PROPERTIES prop1 value1 prop2 value2)</span><br></pre></td></tr></table></figure><p><code>prop1 prop</code>代表属性，取值为：</p><ul><li>INCLUDE_DIRECTORIES</li><li>LINK_DIRECTORIES</li><li>INCLUDE_REGULAR_EXPRESSION</li><li>ADDITIONAL_MAKE_CLEAN_FILES</li></ul><h2 id="12-set-property"><a href="#12-set-property" class="headerlink" title="12. set_property"></a>12. set_property</h2><p>在给定的作用域内设置一个命名的属性</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set_property(&lt;GLOBAL | </span><br><span class="line">            DIRECTORY [dir] | </span><br><span class="line">            TARGET [target ...] | </span><br><span class="line">            SOURCE [src1 ...] | </span><br><span class="line">            TEST [test1 ...] | </span><br><span class="line">            CACHE [entry1 ...]&gt;</span><br><span class="line">             [<span class="meta">APPEND</span>] </span><br><span class="line">             PROPERTY &lt;name&gt; [<span class="keyword">value</span> ...])</span><br></pre></td></tr></table></figure><p>第一个参数决定了属性可以影响的作用域,必须为以下值：</p><ul><li>GLOBAL 全局作作用域,不接受名字</li><li>DIRECTORY 默认为当前路径，但是同样也可以用[dir]指定路径</li><li>TARGET 目标作用，可以是0个或多个已有的目标</li><li>SOURCE 源作用域， 可以是0个过多个源文件</li><li>TEST 测试作用域, 可以是0个或多个已有的测试</li><li>CACHE 必须指定0个或多个cache中已有的条目</li></ul><p><code>PROPERTY</code>参数是必须的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2024/01/30/myfirst-md/"/>
      <url>/2024/01/30/myfirst-md/</url>
      
        <content type="html"><![CDATA[<p>韩孟婷</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/30/hello-world/"/>
      <url>/2024/01/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
